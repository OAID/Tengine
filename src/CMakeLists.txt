# add include path
list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/op)
list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/serializer/tm)
if(TENGINE_USE_TINY_SERIALIZER)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/serializer/tiny)
endif()


# add lib files, for utility
if (TENGINE_BUILD_CPP_API)
    file(GLOB_RECURSE TENGINE_LIB_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/lib/*.c ${CMAKE_CURRENT_SOURCE_DIR}/lib/tengine_cpp_api.cpp)
else()
    file(GLOB_RECURSE TENGINE_LIB_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/lib/*.c)
endif()

# add front end files
file(GLOB_RECURSE TENGINE_FRONT_END_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/op/*.c)

# add serializer files
file(GLOB_RECURSE TENGINE_SERIALIZER_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/serializer/tm/*.c ${CMAKE_CURRENT_SOURCE_DIR}/serializer/tm/op/*.c)
if(TENGINE_USE_TINY_SERIALIZER)
    file(GLOB_RECURSE TENGINE_TINY_SERIALIZER_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/serializer/tiny/*.c)
endif()

# add core srcs
list(APPEND TENGINE_BACKEND_COMMON "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/cpu_allocator.c")
list(APPEND TENGINE_BACKEND_COMMON "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/cpu_device.c")
list(APPEND TENGINE_BACKEND_COMMON "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/cpu_module.c")
list(APPEND TENGINE_BACKEND_COMMON "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/cpu_node_ops.c")
list(APPEND TENGINE_BACKEND_COMMON "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/cpu_probe.c")

# arm
if (${TENGINE_TARGET_PROCESSOR} MATCHES "ARM")
    if (TENGINE_ARCH_ARM_82)
        file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*hcl.c"
                                                    "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*arm.c"
                                                    "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*fp16_arm82.c")
    else()
        file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*hcl.c"
                                                    "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*arm.c")
    endif()

    if (TENGINE_TARGET_PROCESSOR_32Bit)
        file(GLOB_RECURSE TENGINE_BACKEND_HCL_ASM_OPS "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/aarch32/*.S")
    else()
        if (TENGINE_ARCH_ARM_82)
            list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE -march=armv8.2-a+fp16)
            list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE -march=armv8.2-a+fp16)
            list(APPEND TENGINE_COMPILE_OPTIONS_CUDA_PRIVATE -march=armv8.2-a+fp16)
            file(GLOB_RECURSE TENGINE_BACKEND_HCL_ASM_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/aarch64/*.S"
                                                            "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/armv8_2/*.S")
        else()
            file(GLOB_RECURSE TENGINE_BACKEND_HCL_ASM_OPS "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/aarch64/*.S")
        endif()
    endif()
endif()

# x86
if (${TENGINE_TARGET_PROCESSOR} MATCHES "X86")
    if (TENGINE_ARCH_X86_AVX)
        if(CMAKE_SYSTEM_NAME MATCHES "Windows")
            list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE /arch:AVX2)
            list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE /arch:AVX2)
            list(APPEND TENGINE_COMPILE_OPTIONS_CUDA_PRIVATE /arch:AVX2)
        else()
            list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE -mfma)
            list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE -mf16c)

            list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE -mfma)
            list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE -mf16c)
        endif()
    endif()
endif()

# add operator files
if (TENGINE_DYNAMIC_COMPILE AND EXISTS "${CMAKE_SOURCE_DIR}/cmake/operators.cmake")
    # macro for adding include op dir
    macro (ADD_OP name)
        # add reference operator files 
        set (REF_OP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/${name}/*ref.c")
        list (APPEND REF_SOURCE ${REF_OP_PATH})
        
        # add hcl operator files
        # arm
        if (${TENGINE_TARGET_PROCESSOR} MATCHES "ARM")
            if (TENGINE_ARCH_ARM_82)
                set (ARM_OP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/${name}/*arm.c")
                set (ARM82_OP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/${name}/*fp16_arm82.c")
            else()
                set (ARM_OP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/${name}/*arm.c")
            endif()
            list (APPEND HCL_SOURCE ${ARM_OP_PATH})
            list (APPEND HCL_SOURCE ${ARM82_OP_PATH})
        endif()

        # X86
        if (${TENGINE_TARGET_PROCESSOR} MATCHES "X86")
            set (X86_OP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/${name}/*x86.c")
            list (APPEND HCL_SOURCE ${X86_OP_PATH})
        endif()

        # MIPS64
        if (${TENGINE_TARGET_PROCESSOR} MATCHES "MIPS")
            set (MIPS_OP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/${name}/*mips.c")
            list (APPEND HCL_SOURCE ${MIPS_OP_PATH})
        endif()
    endmacro()
    include(${CMAKE_SOURCE_DIR}/cmake/operators.cmake)

    # add reference operator files
    file(GLOB_RECURSE TENGINE_BACKEND_REF_OPS ${REF_SOURCE})

    # add hcl operator files
    # arm or x86 or mips64
    if (${TENGINE_TARGET_PROCESSOR} MATCHES "ARM" OR ${TENGINE_TARGET_PROCESSOR} MATCHES "X86" OR ${TENGINE_TARGET_PROCESSOR} MATCHES "MIPS")
        file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   ${HCL_SOURCE})
    endif()
else()
    # add reference operator files
    file(GLOB_RECURSE TENGINE_BACKEND_REF_OPS "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*ref.c")

    # add hcl operator files
    # arm
    if (${TENGINE_TARGET_PROCESSOR} MATCHES "ARM")
        if (TENGINE_ARCH_ARM_82)
            file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*arm.c"
                                                        "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*fp16_arm82.c")
        else()
            file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*arm.c")
        endif()                                                    
    endif()

    # X86
    if (${TENGINE_TARGET_PROCESSOR} MATCHES "X86")
        file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*x86.c")
    endif()

    # MIPS64
    if (${TENGINE_TARGET_PROCESSOR} MATCHES "MIPS")
        file(GLOB_RECURSE TENGINE_BACKEND_HCL_OPS   "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*mips.c")
    endif()
endif()

# add cmsis operator files
file(GLOB_RECURSE TENGINE_BACKEND_CMSIS_OPS "${CMAKE_CURRENT_SOURCE_DIR}/dev/cpu/op/*cmsis.c")
# add ACL GPU support
if (TENGINE_ENABLE_ACL)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dev/acl)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_SOURCE_DIR}/3rdparty/acl/include)
    list(APPEND TENGINE_ACL_LIB_DIRS ${CMAKE_SOURCE_DIR}/3rdparty/acl/lib)

    #link_directories(${TENGINE_ACL_LIB_DIRS})
    if(TENGINE_VERBOSE)
        message (STATUS "TENGINE: 'TENGINE_ACL_LIB_DIRS' is ${TENGINE_ACL_LIB_DIRS}.")
    endif()

    file(GLOB_RECURSE TENGINE_BACKEND_ACL_BASE "${CMAKE_CURRENT_SOURCE_DIR}/dev/acl/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/dev/acl/*.c")
endif ()


# add vulkan support
if (TENGINE_ENABLE_VULKAN)
    add_subdirectory(dev/vulkan)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/dev/vulkan)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/dev/vulkan)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE ${Vulkan_INCLUDE_DIR})
    list(APPEND TENGINE_VULKAN_LIB_DIRS $ENV{VULKAN_SDK}/lib)
    
    link_directories(${TENGINE_VULKAN_LIB_DIRS})
    if(TENGINE_VERBOSE)
        message (STATUS "TENGINE: 'TENGINE_VULKAN_LIB_DIRS' is ${TENGINE_VULKAN_LIB_DIRS}.")
    endif()
endif()


# add nVIDIA TensorRT support
if (TENGINE_ENABLE_TENSORRT)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CMAKE_CURRENT_SOURCE_DIR}/dev/tensorrt)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CMAKE_CURRENT_SOURCE_DIR}/dev/tensorrt/op)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CUDA_INCLUDE_DIR})
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${TENSORRT_INCLUDE_DIR})

    list(APPEND TENGINE_TENSORRT_LIB_DIRS ${TENSORRT_LIBRARY_DIR})
    list(APPEND TENGINE_TENSORRT_LIB_DIRS ${CUDA_LIBARAY_DIR})

    #message("TENGINE_INCLUDE_DIRS_PRIVATE=${TENGINE_INCLUDE_DIRS_PRIVATE}")

    link_directories(${TENGINE_TENSORRT_LIB_DIRS})
    if(TENGINE_VERBOSE)
        message (STATUS "TENGINE: 'TENGINE_TENSORRT_LIB_DIRS' is ${TENGINE_TENSORRT_LIB_DIRS}.")
    endif()

    file(GLOB_RECURSE TENGINE_BACKEND_TENSORRT_BASE "${CMAKE_CURRENT_SOURCE_DIR}/dev/tensorrt/*.c" "${CMAKE_CURRENT_SOURCE_DIR}/dev/tensorrt/*.cpp")
    file(GLOB_RECURSE TENGINE_BACKEND_TENSORRT_OPS "${CMAKE_CURRENT_SOURCE_DIR}/dev/tensorrt/op/*.cpp")
endif ()

# add nVIDIA cudabackend support
if (TENGINE_ENABLE_CUDABACKEND)
    enable_language(CUDA)

    message("### CUDABACKEND_INCLUDE_DIR=${CUDABACKEND_INCLUDE_DIR}")
    include(${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/cmake/FindcuDNN.cmake)
    include(${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/cmake/FindcuBLAS.cmake)

    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/op)
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CUDABACKEND_INCLUDE_DIR})
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CUDA_INCLUDE_DIRS})
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CUDNN_INCLUDE_DIR})
    list(APPEND TENGINE_INCLUDE_DIRS_PRIVATE  ${CUBLAS_INCLUDE_DIRS})

#    list(APPEND TENGINE_CUDABACKEND_LIB_DIRS ${CUDABACKEND_LIBRARY_DIR})
    list(APPEND TENGINE_CUDABACKEND_LIB_DIRS ${CUDA_LIBRARIES})
    list(APPEND TENGINE_CUDABACKEND_LIB_DIRS ${CUDNN_LIBRARY})
    list(APPEND TENGINE_CUDABACKEND_LIB_DIRS ${CUBLAS_LIBRARIES})

    message("### TENGINE_INCLUDE_DIRS_PRIVATE=${TENGINE_INCLUDE_DIRS_PRIVATE}")

    link_directories(${TENGINE_CUDABACKEND_LIB_DIRS})
    if(TENGINE_VERBOSE)
        message (STATUS "TENGINE: 'TENGINE_CUDABACKEND_LIB_DIRS' is ${TENGINE_CUDABACKEND_LIB_DIRS}.")
    endif()

    file(GLOB_RECURSE TENGINE_BACKEND_CUDABACKEND_BASE "${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/*.c" "${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/*.cpp")
    file(GLOB_RECURSE TENGINE_BACKEND_CUDABACKEND_OPS "${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/op/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/dev/cuda/op/*.cu")
endif ()
# add libraries path
list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_ACL_LIB_DIRS})
list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_VULKAN_LIB_DIRS})
list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_CUDABACKEND_LIB_DIRS})
set(TENGINE_COMMON_LIB_DIRS ${TENGINE_LINKING_LIBRARIES_PRIVATE} CACHE INTERNAL "" FORCE)
link_directories(${TENGINE_LINKING_LIBRARIES_PRIVATE})


# add standalone hcl lib
set (TENGINE_STANDALONE_HCL_LIB_NAME hclcpu)
if (TENGINE_STANDALONE_HCL)
    if (${TENGINE_TARGET_PROCESSOR} MATCHES "ARM")
        add_library (
                ${TENGINE_STANDALONE_HCL_LIB_NAME} SHARED
                ${TENGINE_BACKEND_HCL_OPS}
                ${TENGINE_BACKEND_HCL_ASM_OPS}
        )
    elseif (${TENGINE_TARGET_PROCESSOR} MATCHES "X86")
        add_library (
                ${TENGINE_STANDALONE_HCL_LIB_NAME} SHARED
                ${TENGINE_BACKEND_HCL_OPS}
        )
    elseif (${TENGINE_TARGET_PROCESSOR} MATCHES "MIPS")
        list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE -mips64r2)
        list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE -mabi=64)
        list(APPEND TENGINE_COMPILE_OPTIONS_C_PRIVATE -mmsa)

        list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE -mips64r2)
        list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE -mabi=64)
        list(APPEND TENGINE_COMPILE_OPTIONS_CXX_PRIVATE -mmsa)

        list(APPEND TENGINE_COMPILE_OPTIONS_CUDA_PRIVATE -mips64r2)
        list(APPEND TENGINE_COMPILE_OPTIONS_CUDA_PRIVATE -mabi=64)
        list(APPEND TENGINE_COMPILE_OPTIONS_CUDA_PRIVATE -mmsa)
        add_library (
                ${TENGINE_STANDALONE_HCL_LIB_NAME} SHARED
                ${TENGINE_BACKEND_HCL_OPS}
        )
    endif()

    if (TENGINE_BACKEND_HCL_OPS)
        unset(TENGINE_BACKEND_HCL_OPS)
    endif()

    if (TENGINE_BACKEND_HCL_ASM_OPS)
        unset(TENGINE_BACKEND_HCL_ASM_OPS)
    endif()

    if (TENGINE_STANDALONE_HCL_AUTO_LOAD)
        LIST (APPEND TENGINE_COMPILE_DEFINITION_CXX_PRIVATE TENGINE_AUTO_LOAD_HCL)
        LIST (APPEND TENGINE_COMPILE_DEFINITION_CUDA_PRIVATE TENGINE_AUTO_LOAD_HCL)
    endif()
endif()


# add advanced hcl source files
if (${TENGINE_TARGET_PROCESSOR} MATCHES "ARM")
    add_library(${CMAKE_PROJECT_NAME} SHARED
        ${TENGINE_LIB_SRCS} ${TENGINE_FRONT_END_SRCS}
        ${TENGINE_SERIALIZER_SRCS}
        ${TENGINE_TINY_SERIALIZER_SRCS}
        ${TENGINE_BACKEND_COMMON}
        ${TENGINE_BACKEND_REF_OPS}
        ${TENGINE_BACKEND_HCL_OPS}
        ${TENGINE_BACKEND_HCL_ASM_OPS}
        ${TENGINE_BACKEND_ACL_BASE}
        ${TENGINE_BACKEND_VULKAN_BASE}
        ${TENGINE_BACKEND_VULKAN_OPS}
        ${TENGINE_BACKEND_TENSORRT_BASE}
        ${TENGINE_BACKEND_TENSORRT_OPS}
        ${TENGINE_BACKEND_CUDABACKEND_BASE}
        ${TENGINE_BACKEND_CUDABACKEND_OPS})
elseif (${TENGINE_TARGET_PROCESSOR} MATCHES "X86")
    add_library(${CMAKE_PROJECT_NAME} SHARED
        ${TENGINE_LIB_SRCS} ${TENGINE_FRONT_END_SRCS}
        ${TENGINE_SERIALIZER_SRCS}
        ${TENGINE_TINY_SERIALIZER_SRCS}
        ${TENGINE_BACKEND_COMMON}
        ${TENGINE_BACKEND_REF_OPS}
        ${TENGINE_BACKEND_HCL_OPS}
        ${TENGINE_BACKEND_VULKAN_BASE}
        ${TENGINE_BACKEND_VULKAN_OPS}
        ${TENGINE_BACKEND_TENSORRT_BASE}
        ${TENGINE_BACKEND_TENSORRT_OPS}
        ${TENGINE_BACKEND_CUDABACKEND_BASE}
        ${TENGINE_BACKEND_CUDABACKEND_OPS})
elseif (${TENGINE_TARGET_PROCESSOR} MATCHES "MIPS")
    add_definitions(-mips64r2)
    add_definitions(-mabi=64)
    add_definitions(-mmsa)
    add_library(${CMAKE_PROJECT_NAME} SHARED
        ${TENGINE_LIB_SRCS} ${TENGINE_FRONT_END_SRCS}
        ${TENGINE_SERIALIZER_SRCS}
        ${TENGINE_TINY_SERIALIZER_SRCS}
        ${TENGINE_BACKEND_COMMON}
        ${TENGINE_BACKEND_REF_OPS}
        ${TENGINE_BACKEND_HCL_OPS})
else()
    add_library(${CMAKE_PROJECT_NAME} SHARED
        ${TENGINE_LIB_SRCS}
        ${TENGINE_FRONT_END_SRCS}
        ${TENGINE_SERIALIZER_SRCS}
        ${TENGINE_TINY_SERIALIZER_SRCS}
        ${TENGINE_BACKEND_COMMON}
        ${TENGINE_BACKEND_REF_OPS})
endif()



TENGINE_USE_LIB_OPENMP(${CMAKE_PROJECT_NAME})
# show linking libraries
if(TENGINE_VERBOSE)
    message (STATUS "TENGINE: 'TENGINE_LINKING_LIBS' is ${TENGINE_LINKING_LIBS}.")
endif()

if (NOT TENGINE_ENABLE_ALL_SYMBOL)
    if (NOT (CMAKE_SYSTEM_NAME MATCHES "Windows"))
        set_property (TARGET ${CMAKE_PROJECT_NAME} PROPERTY COMPILE_FLAGS "-fvisibility=hidden")
        set_property (TARGET ${CMAKE_PROJECT_NAME} PROPERTY LINK_FLAGS    "-fvisibility=hidden")
    endif()
endif()

if (ANDROID)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE android)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_LINKING_LIBS})
elseif(MSVC)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_LINKING_LIBS})
elseif(OHOS)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE dl)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE m)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_LINKING_LIBS})
else()
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE pthread)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE dl)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE m)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_LINKING_LIBS})
endif()

if (TENGINE_ENABLE_ACL)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE arm_compute)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE arm_compute_core)
endif ()

if (TENGINE_ENABLE_VULKAN)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${Vulkan_LIBRARY})
    message("===== vulkan library === ${Vulkan_LIBRARY}")
    add_dependencies(${CMAKE_PROJECT_NAME} generate-spirv)
endif ()

if (TENGINE_STANDALONE_HCL)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE ${TENGINE_STANDALONE_HCL_LIB_NAME})
endif()

if (TENGINE_ENABLE_TENSORRT)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE nvinfer)
    list(APPEND TENGINE_LINKING_LIBRARIES_PRIVATE cudart)
endif()

if (TENGINE_ENABLE_CUDABACKEND)
    target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:CUDA>: ${TENGINE_COMPILE_DEFINITION_CUDA_PRIVATE}>)
    target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:CUDA>: ${TENGINE_COMPILE_OPTIONS_CUDA_PRIVATE}>)
endif ()

# add target compile include link
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:ASM>: ${TENGINE_COMPILE_DEFINITION_CXX_PRIVATE}>)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:C>: ${TENGINE_COMPILE_DEFINITION_CXX_PRIVATE}>)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:CXX>: ${TENGINE_COMPILE_DEFINITION_CXX_PRIVATE}>)
target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:ASM>: ${TENGINE_COMPILE_OPTIONS_C_PRIVATE}>)
target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:C>: ${TENGINE_COMPILE_OPTIONS_C_PRIVATE}>)
target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE $<$<COMPILE_LANGUAGE:CXX>: ${TENGINE_COMPILE_OPTIONS_CXX_PRIVATE}>)
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${TENGINE_INCLUDE_DIRS_PRIVATE})
target_link_libraries(${CMAKE_PROJECT_NAME} ${TENGINE_LINKING_LIBRARIES_PRIVATE})

if(TENGINE_COVERAGE)
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")    
    target_link_libraries(${CMAKE_PROJECT_NAME} -coverage -lgcov)
endif()

# add install files
install (TARGETS ${CMAKE_PROJECT_NAME} DESTINATION lib)
if (TENGINE_STANDALONE_HCL)
    install (TARGETS ${TENGINE_STANDALONE_HCL_LIB_NAME} DESTINATION lib)
endif()
install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/../include/tengine_c_api.h DESTINATION include)
if (TENGINE_BUILD_CPP_API)
    install (FILES ${CMAKE_CURRENT_SOURCE_DIR}/../include/tengine_cpp_api.h DESTINATION include)
endif()

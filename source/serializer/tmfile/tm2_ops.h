/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Copyright (c) 2021, OPEN AI LAB
 * Author: lswang@openailab.com
 */

#pragma once

#include "utility/log.h"

// THIS PARTED WAS GENERATED BY CMAKE, DO NOT EDIT THIS FILE.
// ANY CHANGES WILL BE ERASED BY CMAKE REGENERATION.


// code generation start
extern int register_tm2_add_n_op();
extern int register_tm2_argmax_op();
extern int register_tm2_argmin_op();
extern int register_tm2_batchnorm_op();
extern int register_tm2_batchtospacend_op();
extern int register_tm2_bias_op();
extern int register_tm2_broadmul_op();
extern int register_tm2_cast_op();
extern int register_tm2_ceil_op();
extern int register_tm2_clip_op();
extern int register_tm2_comparison_op();
extern int register_tm2_concat_op();
extern int register_tm2_conv_op();
extern int register_tm2_crop_op();
extern int register_tm2_deconv_op();
extern int register_tm2_depthtospace_op();
extern int register_tm2_detection_output_op();
extern int register_tm2_detection_postprocess_op();
extern int register_tm2_dropout_op();
extern int register_tm2_eltwise_op();
extern int register_tm2_elu_op();
extern int register_tm2_embedding_op();
extern int register_tm2_expanddims_op();
extern int register_tm2_fc_op();
extern int register_tm2_flatten_op();
extern int register_tm2_gather_op();
extern int register_tm2_gemm_op();
extern int register_tm2_generic_op();
extern int register_tm2_gru_op();
extern int register_tm2_hardsigmoid_op();
extern int register_tm2_hardswish_op();
extern int register_tm2_instancenorm_op();
extern int register_tm2_interp_op();
extern int register_tm2_l2normalization_op();
extern int register_tm2_l2pool_op();
extern int register_tm2_logical_op();
extern int register_tm2_logistic_op();
extern int register_tm2_logsoftmax_op();
extern int register_tm2_lrn_op();
extern int register_tm2_lstm_op();
extern int register_tm2_matmul_op();
extern int register_tm2_maximum_op();
extern int register_tm2_mean_op();
extern int register_tm2_mish_op();
extern int register_tm2_mvn_op();
extern int register_tm2_noop_op();
extern int register_tm2_normalize_op();
extern int register_tm2_pad_op();
extern int register_tm2_permute_op();
extern int register_tm2_pool_op();
extern int register_tm2_prelu_op();
extern int register_tm2_priorbox_op();
extern int register_tm2_psroipooling_op();
extern int register_tm2_reducel2_op();
extern int register_tm2_reduction_op();
extern int register_tm2_region_op();
extern int register_tm2_relu_op();
extern int register_tm2_relu1_op();
extern int register_tm2_relu6_op();
extern int register_tm2_reorg_op();
extern int register_tm2_reshape_op();
extern int register_tm2_resize_op();
extern int register_tm2_reverse_op();
extern int register_tm2_rnn_op();
extern int register_tm2_roialign_op();
extern int register_tm2_roipooling_op();
extern int register_tm2_round_op();
extern int register_tm2_rpn_op();
extern int register_tm2_scale_op();
extern int register_tm2_scatter_op();
extern int register_tm2_shape_op();
extern int register_tm2_shuffle_channel_op();
extern int register_tm2_sigmoid_op();
extern int register_tm2_slice_op();
extern int register_tm2_softmax_op();
extern int register_tm2_spacetobatchnd_op();
extern int register_tm2_spacetodepth_op();
extern int register_tm2_sparsetodense_op();
extern int register_tm2_split_op();
extern int register_tm2_squareddifference_op();
extern int register_tm2_squeeze_op();
extern int register_tm2_strided_slice_op();
extern int register_tm2_swap_axis_op();
extern int register_tm2_tanh_op();
extern int register_tm2_threshold_op();
extern int register_tm2_tile_op();
extern int register_tm2_topkv2_op();
extern int register_tm2_transpose_op();
extern int register_tm2_unary_op();
extern int register_tm2_unsqueeze_op();
extern int register_tm2_upsample_op();
extern int register_tm2_where_op();
extern int register_tm2_zeroslike_op();
// code generation finish

// code generation start
extern int unregister_tm2_add_n_op();
extern int unregister_tm2_argmax_op();
extern int unregister_tm2_argmin_op();
extern int unregister_tm2_batchnorm_op();
extern int unregister_tm2_batchtospacend_op();
extern int unregister_tm2_bias_op();
extern int unregister_tm2_broadmul_op();
extern int unregister_tm2_cast_op();
extern int unregister_tm2_ceil_op();
extern int unregister_tm2_clip_op();
extern int unregister_tm2_comparison_op();
extern int unregister_tm2_concat_op();
extern int unregister_tm2_conv_op();
extern int unregister_tm2_crop_op();
extern int unregister_tm2_deconv_op();
extern int unregister_tm2_depthtospace_op();
extern int unregister_tm2_detection_output_op();
extern int unregister_tm2_detection_postprocess_op();
extern int unregister_tm2_dropout_op();
extern int unregister_tm2_eltwise_op();
extern int unregister_tm2_elu_op();
extern int unregister_tm2_embedding_op();
extern int unregister_tm2_expanddims_op();
extern int unregister_tm2_fc_op();
extern int unregister_tm2_flatten_op();
extern int unregister_tm2_gather_op();
extern int unregister_tm2_gemm_op();
extern int unregister_tm2_generic_op();
extern int unregister_tm2_gru_op();
extern int unregister_tm2_hardsigmoid_op();
extern int unregister_tm2_hardswish_op();
extern int unregister_tm2_instancenorm_op();
extern int unregister_tm2_interp_op();
extern int unregister_tm2_l2normalization_op();
extern int unregister_tm2_l2pool_op();
extern int unregister_tm2_logical_op();
extern int unregister_tm2_logistic_op();
extern int unregister_tm2_logsoftmax_op();
extern int unregister_tm2_lrn_op();
extern int unregister_tm2_lstm_op();
extern int unregister_tm2_matmul_op();
extern int unregister_tm2_maximum_op();
extern int unregister_tm2_mean_op();
extern int unregister_tm2_mish_op();
extern int unregister_tm2_mvn_op();
extern int unregister_tm2_noop_op();
extern int unregister_tm2_normalize_op();
extern int unregister_tm2_pad_op();
extern int unregister_tm2_permute_op();
extern int unregister_tm2_pool_op();
extern int unregister_tm2_prelu_op();
extern int unregister_tm2_priorbox_op();
extern int unregister_tm2_psroipooling_op();
extern int unregister_tm2_reducel2_op();
extern int unregister_tm2_reduction_op();
extern int unregister_tm2_region_op();
extern int unregister_tm2_relu_op();
extern int unregister_tm2_relu1_op();
extern int unregister_tm2_relu6_op();
extern int unregister_tm2_reorg_op();
extern int unregister_tm2_reshape_op();
extern int unregister_tm2_resize_op();
extern int unregister_tm2_reverse_op();
extern int unregister_tm2_rnn_op();
extern int unregister_tm2_roialign_op();
extern int unregister_tm2_roipooling_op();
extern int unregister_tm2_round_op();
extern int unregister_tm2_rpn_op();
extern int unregister_tm2_scale_op();
extern int unregister_tm2_scatter_op();
extern int unregister_tm2_shape_op();
extern int unregister_tm2_shuffle_channel_op();
extern int unregister_tm2_sigmoid_op();
extern int unregister_tm2_slice_op();
extern int unregister_tm2_softmax_op();
extern int unregister_tm2_spacetobatchnd_op();
extern int unregister_tm2_spacetodepth_op();
extern int unregister_tm2_sparsetodense_op();
extern int unregister_tm2_split_op();
extern int unregister_tm2_squareddifference_op();
extern int unregister_tm2_squeeze_op();
extern int unregister_tm2_strided_slice_op();
extern int unregister_tm2_swap_axis_op();
extern int unregister_tm2_tanh_op();
extern int unregister_tm2_threshold_op();
extern int unregister_tm2_tile_op();
extern int unregister_tm2_topkv2_op();
extern int unregister_tm2_transpose_op();
extern int unregister_tm2_unary_op();
extern int unregister_tm2_unsqueeze_op();
extern int unregister_tm2_upsample_op();
extern int unregister_tm2_where_op();
extern int unregister_tm2_zeroslike_op();
// code generation finish



/*!
 * @brief Register all serializer.
 *
 * @return statue value, 0 success, other value failure.
 */
int register_all_tm2_ops()
{
    int ret;
    // generated register functions
    // code generation start
    ret = register_tm2_add_n_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_add_n_op()", ret);
    }
    ret = register_tm2_argmax_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_argmax_op()", ret);
    }
    ret = register_tm2_argmin_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_argmin_op()", ret);
    }
    ret = register_tm2_batchnorm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_batchnorm_op()", ret);
    }
    ret = register_tm2_batchtospacend_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_batchtospacend_op()", ret);
    }
    ret = register_tm2_bias_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_bias_op()", ret);
    }
    ret = register_tm2_broadmul_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_broadmul_op()", ret);
    }
    ret = register_tm2_cast_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_cast_op()", ret);
    }
    ret = register_tm2_ceil_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_ceil_op()", ret);
    }
    ret = register_tm2_clip_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_clip_op()", ret);
    }
    ret = register_tm2_comparison_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_comparison_op()", ret);
    }
    ret = register_tm2_concat_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_concat_op()", ret);
    }
    ret = register_tm2_conv_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_conv_op()", ret);
    }
    ret = register_tm2_crop_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_crop_op()", ret);
    }
    ret = register_tm2_deconv_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_deconv_op()", ret);
    }
    ret = register_tm2_depthtospace_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_depthtospace_op()", ret);
    }
    ret = register_tm2_detection_output_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_detection_output_op()", ret);
    }
    ret = register_tm2_detection_postprocess_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_detection_postprocess_op()", ret);
    }
    ret = register_tm2_dropout_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_dropout_op()", ret);
    }
    ret = register_tm2_eltwise_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_eltwise_op()", ret);
    }
    ret = register_tm2_elu_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_elu_op()", ret);
    }
    ret = register_tm2_embedding_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_embedding_op()", ret);
    }
    ret = register_tm2_expanddims_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_expanddims_op()", ret);
    }
    ret = register_tm2_fc_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_fc_op()", ret);
    }
    ret = register_tm2_flatten_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_flatten_op()", ret);
    }
    ret = register_tm2_gather_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_gather_op()", ret);
    }
    ret = register_tm2_gemm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_gemm_op()", ret);
    }
    ret = register_tm2_generic_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_generic_op()", ret);
    }
    ret = register_tm2_gru_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_gru_op()", ret);
    }
    ret = register_tm2_hardsigmoid_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_hardsigmoid_op()", ret);
    }
    ret = register_tm2_hardswish_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_hardswish_op()", ret);
    }
    ret = register_tm2_instancenorm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_instancenorm_op()", ret);
    }
    ret = register_tm2_interp_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_interp_op()", ret);
    }
    ret = register_tm2_l2normalization_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_l2normalization_op()", ret);
    }
    ret = register_tm2_l2pool_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_l2pool_op()", ret);
    }
    ret = register_tm2_logical_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_logical_op()", ret);
    }
    ret = register_tm2_logistic_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_logistic_op()", ret);
    }
    ret = register_tm2_logsoftmax_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_logsoftmax_op()", ret);
    }
    ret = register_tm2_lrn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_lrn_op()", ret);
    }
    ret = register_tm2_lstm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_lstm_op()", ret);
    }
    ret = register_tm2_matmul_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_matmul_op()", ret);
    }
    ret = register_tm2_maximum_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_maximum_op()", ret);
    }
    ret = register_tm2_mean_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_mean_op()", ret);
    }
    ret = register_tm2_mish_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_mish_op()", ret);
    }
    ret = register_tm2_mvn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_mvn_op()", ret);
    }
    ret = register_tm2_noop_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_noop_op()", ret);
    }
    ret = register_tm2_normalize_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_normalize_op()", ret);
    }
    ret = register_tm2_pad_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_pad_op()", ret);
    }
    ret = register_tm2_permute_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_permute_op()", ret);
    }
    ret = register_tm2_pool_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_pool_op()", ret);
    }
    ret = register_tm2_prelu_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_prelu_op()", ret);
    }
    ret = register_tm2_priorbox_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_priorbox_op()", ret);
    }
    ret = register_tm2_psroipooling_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_psroipooling_op()", ret);
    }
    ret = register_tm2_reducel2_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reducel2_op()", ret);
    }
    ret = register_tm2_reduction_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reduction_op()", ret);
    }
    ret = register_tm2_region_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_region_op()", ret);
    }
    ret = register_tm2_relu_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_relu_op()", ret);
    }
    ret = register_tm2_relu1_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_relu1_op()", ret);
    }
    ret = register_tm2_relu6_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_relu6_op()", ret);
    }
    ret = register_tm2_reorg_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reorg_op()", ret);
    }
    ret = register_tm2_reshape_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reshape_op()", ret);
    }
    ret = register_tm2_resize_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_resize_op()", ret);
    }
    ret = register_tm2_reverse_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reverse_op()", ret);
    }
    ret = register_tm2_rnn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_rnn_op()", ret);
    }
    ret = register_tm2_roialign_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_roialign_op()", ret);
    }
    ret = register_tm2_roipooling_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_roipooling_op()", ret);
    }
    ret = register_tm2_round_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_round_op()", ret);
    }
    ret = register_tm2_rpn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_rpn_op()", ret);
    }
    ret = register_tm2_scale_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_scale_op()", ret);
    }
    ret = register_tm2_scatter_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_scatter_op()", ret);
    }
    ret = register_tm2_shape_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_shape_op()", ret);
    }
    ret = register_tm2_shuffle_channel_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_shuffle_channel_op()", ret);
    }
    ret = register_tm2_sigmoid_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_sigmoid_op()", ret);
    }
    ret = register_tm2_slice_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_slice_op()", ret);
    }
    ret = register_tm2_softmax_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_softmax_op()", ret);
    }
    ret = register_tm2_spacetobatchnd_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_spacetobatchnd_op()", ret);
    }
    ret = register_tm2_spacetodepth_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_spacetodepth_op()", ret);
    }
    ret = register_tm2_sparsetodense_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_sparsetodense_op()", ret);
    }
    ret = register_tm2_split_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_split_op()", ret);
    }
    ret = register_tm2_squareddifference_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_squareddifference_op()", ret);
    }
    ret = register_tm2_squeeze_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_squeeze_op()", ret);
    }
    ret = register_tm2_strided_slice_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_strided_slice_op()", ret);
    }
    ret = register_tm2_swap_axis_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_swap_axis_op()", ret);
    }
    ret = register_tm2_tanh_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_tanh_op()", ret);
    }
    ret = register_tm2_threshold_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_threshold_op()", ret);
    }
    ret = register_tm2_tile_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_tile_op()", ret);
    }
    ret = register_tm2_topkv2_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_topkv2_op()", ret);
    }
    ret = register_tm2_transpose_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_transpose_op()", ret);
    }
    ret = register_tm2_unary_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_unary_op()", ret);
    }
    ret = register_tm2_unsqueeze_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_unsqueeze_op()", ret);
    }
    ret = register_tm2_upsample_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_upsample_op()", ret);
    }
    ret = register_tm2_where_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_where_op()", ret);
    }
    ret = register_tm2_zeroslike_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_zeroslike_op()", ret);
    }
    // code generation finish




    return 0;
}


/*!
 * @brief unregister all serializer.
 *
 * @return statue value, 0 success, other value failure.
 */
int unregister_all_tm2_ops()
{
    int ret;
    // generated unregister functions
    // code generation start
    ret = unregister_tm2_add_n_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_add_n_op()", ret);
    }
    ret = unregister_tm2_argmax_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_argmax_op()", ret);
    }
    ret = unregister_tm2_argmin_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_argmin_op()", ret);
    }
    ret = unregister_tm2_batchnorm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_batchnorm_op()", ret);
    }
    ret = unregister_tm2_batchtospacend_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_batchtospacend_op()", ret);
    }
    ret = unregister_tm2_bias_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_bias_op()", ret);
    }
    ret = unregister_tm2_broadmul_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_broadmul_op()", ret);
    }
    ret = unregister_tm2_cast_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_cast_op()", ret);
    }
    ret = unregister_tm2_ceil_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_ceil_op()", ret);
    }
    ret = unregister_tm2_clip_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_clip_op()", ret);
    }
    ret = unregister_tm2_comparison_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_comparison_op()", ret);
    }
    ret = unregister_tm2_concat_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_concat_op()", ret);
    }
    ret = unregister_tm2_conv_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_conv_op()", ret);
    }
    ret = unregister_tm2_crop_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_crop_op()", ret);
    }
    ret = unregister_tm2_deconv_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_deconv_op()", ret);
    }
    ret = unregister_tm2_depthtospace_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_depthtospace_op()", ret);
    }
    ret = unregister_tm2_detection_output_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_detection_output_op()", ret);
    }
    ret = unregister_tm2_detection_postprocess_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_detection_postprocess_op()", ret);
    }
    ret = unregister_tm2_dropout_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_dropout_op()", ret);
    }
    ret = unregister_tm2_eltwise_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_eltwise_op()", ret);
    }
    ret = unregister_tm2_elu_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_elu_op()", ret);
    }
    ret = unregister_tm2_embedding_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_embedding_op()", ret);
    }
    ret = unregister_tm2_expanddims_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_expanddims_op()", ret);
    }
    ret = unregister_tm2_fc_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_fc_op()", ret);
    }
    ret = unregister_tm2_flatten_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_flatten_op()", ret);
    }
    ret = unregister_tm2_gather_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_gather_op()", ret);
    }
    ret = unregister_tm2_gemm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_gemm_op()", ret);
    }
    ret = unregister_tm2_generic_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_generic_op()", ret);
    }
    ret = unregister_tm2_gru_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_gru_op()", ret);
    }
    ret = unregister_tm2_hardsigmoid_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_hardsigmoid_op()", ret);
    }
    ret = unregister_tm2_hardswish_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_hardswish_op()", ret);
    }
    ret = unregister_tm2_instancenorm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_instancenorm_op()", ret);
    }
    ret = unregister_tm2_interp_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_interp_op()", ret);
    }
    ret = unregister_tm2_l2normalization_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_l2normalization_op()", ret);
    }
    ret = unregister_tm2_l2pool_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_l2pool_op()", ret);
    }
    ret = unregister_tm2_logical_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_logical_op()", ret);
    }
    ret = unregister_tm2_logistic_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_logistic_op()", ret);
    }
    ret = unregister_tm2_logsoftmax_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_logsoftmax_op()", ret);
    }
    ret = unregister_tm2_lrn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_lrn_op()", ret);
    }
    ret = unregister_tm2_lstm_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_lstm_op()", ret);
    }
    ret = unregister_tm2_matmul_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_matmul_op()", ret);
    }
    ret = unregister_tm2_maximum_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_maximum_op()", ret);
    }
    ret = unregister_tm2_mean_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_mean_op()", ret);
    }
    ret = unregister_tm2_mish_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_mish_op()", ret);
    }
    ret = unregister_tm2_mvn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_mvn_op()", ret);
    }
    ret = unregister_tm2_noop_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_noop_op()", ret);
    }
    ret = unregister_tm2_normalize_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_normalize_op()", ret);
    }
    ret = unregister_tm2_pad_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_pad_op()", ret);
    }
    ret = unregister_tm2_permute_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_permute_op()", ret);
    }
    ret = unregister_tm2_pool_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_pool_op()", ret);
    }
    ret = unregister_tm2_prelu_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_prelu_op()", ret);
    }
    ret = unregister_tm2_priorbox_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_priorbox_op()", ret);
    }
    ret = unregister_tm2_psroipooling_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_psroipooling_op()", ret);
    }
    ret = unregister_tm2_reducel2_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reducel2_op()", ret);
    }
    ret = unregister_tm2_reduction_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reduction_op()", ret);
    }
    ret = unregister_tm2_region_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_region_op()", ret);
    }
    ret = unregister_tm2_relu_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_relu_op()", ret);
    }
    ret = unregister_tm2_relu1_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_relu1_op()", ret);
    }
    ret = unregister_tm2_relu6_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_relu6_op()", ret);
    }
    ret = unregister_tm2_reorg_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reorg_op()", ret);
    }
    ret = unregister_tm2_reshape_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reshape_op()", ret);
    }
    ret = unregister_tm2_resize_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_resize_op()", ret);
    }
    ret = unregister_tm2_reverse_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_reverse_op()", ret);
    }
    ret = unregister_tm2_rnn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_rnn_op()", ret);
    }
    ret = unregister_tm2_roialign_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_roialign_op()", ret);
    }
    ret = unregister_tm2_roipooling_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_roipooling_op()", ret);
    }
    ret = unregister_tm2_round_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_round_op()", ret);
    }
    ret = unregister_tm2_rpn_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_rpn_op()", ret);
    }
    ret = unregister_tm2_scale_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_scale_op()", ret);
    }
    ret = unregister_tm2_scatter_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_scatter_op()", ret);
    }
    ret = unregister_tm2_shape_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_shape_op()", ret);
    }
    ret = unregister_tm2_shuffle_channel_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_shuffle_channel_op()", ret);
    }
    ret = unregister_tm2_sigmoid_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_sigmoid_op()", ret);
    }
    ret = unregister_tm2_slice_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_slice_op()", ret);
    }
    ret = unregister_tm2_softmax_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_softmax_op()", ret);
    }
    ret = unregister_tm2_spacetobatchnd_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_spacetobatchnd_op()", ret);
    }
    ret = unregister_tm2_spacetodepth_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_spacetodepth_op()", ret);
    }
    ret = unregister_tm2_sparsetodense_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_sparsetodense_op()", ret);
    }
    ret = unregister_tm2_split_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_split_op()", ret);
    }
    ret = unregister_tm2_squareddifference_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_squareddifference_op()", ret);
    }
    ret = unregister_tm2_squeeze_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_squeeze_op()", ret);
    }
    ret = unregister_tm2_strided_slice_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_strided_slice_op()", ret);
    }
    ret = unregister_tm2_swap_axis_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_swap_axis_op()", ret);
    }
    ret = unregister_tm2_tanh_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_tanh_op()", ret);
    }
    ret = unregister_tm2_threshold_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_threshold_op()", ret);
    }
    ret = unregister_tm2_tile_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_tile_op()", ret);
    }
    ret = unregister_tm2_topkv2_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_topkv2_op()", ret);
    }
    ret = unregister_tm2_transpose_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_transpose_op()", ret);
    }
    ret = unregister_tm2_unary_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_unary_op()", ret);
    }
    ret = unregister_tm2_unsqueeze_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_unsqueeze_op()", ret);
    }
    ret = unregister_tm2_upsample_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_upsample_op()", ret);
    }
    ret = unregister_tm2_where_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_where_op()", ret);
    }
    ret = unregister_tm2_zeroslike_op();
    if(0 != ret)
    {
        TLOG_ERR("Tengine FATAL: Call %s failed(%d).\n", "register_tm2_zeroslike_op()", ret);
    }
    // code generation finish


    return 0;
}
